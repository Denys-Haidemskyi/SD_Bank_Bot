from aiogram import Bot, Dispatcher, F, Router
from aiogram.types import Message, CallbackQuery
from aiogram.filters import CommandStart, Command
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from bas.base import mycursor, mydb
import app.keyboards as kb
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from app.keyboards import create_tasks_keyboard
import datetime as dt

router = Router()

class TaskStatus(StatesGroup):
    name = State()
    desc = State()
    price = State()
    usr_id = State()

@router.message(CommandStart())
async def cmd_start(message: Message):
    user_id = message.from_user.id
    username = message.from_user.username
    first_name = message.from_user.first_name
    create_time = dt.datetime.now()

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    sql_check_user = "SELECT * FROM users WHERE user_id = %s"
    mycursor.execute(sql_check_user, (user_id,))
    user = mycursor.fetchone()

    if user is None:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –∑–∞–ø–∏—Å—å
        sql_create_account = """
        INSERT INTO users (user_id, telegram_id, username, balance, created_at)
        VALUES (%s, %s, %s, %s, %s)
        """
        val = (user_id, user_id, username, 0, create_time)
        mycursor.execute(sql_create_account, val)
        mydb.commit()

    await message.answer(f'–ü—Ä–∏–≤–µ—Ç {first_name}, —ç—Ç–æ –±–æ—Ç S&D Bank, —Ç–≤–æ–π –Ω–æ–º–µ—Ä —Å—á—ë—Ç–∞ {user_id}', reply_markup=kb.main)

@router.message(F.text == '–ó–∞–¥–∞–Ω–∏—èüìã')
async def tasks(message: Message):
    tasks_keyboard = await create_tasks_keyboard()
    await message.answer('–í–æ—Ç —Å–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', reply_markup=tasks_keyboard)

@router.callback_query(lambda c: c.data and c.data.startswith('task_'))
async def handle_task_selection(callback_query: CallbackQuery):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º ID –∑–∞–¥–∞—á–∏ –∏–∑ callback_data
    task_id = callback_query.data.split('_')[1]
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
    sql = 'SELECT task_name, description, reward FROM tasks WHERE task_id = %s'
    mycursor.execute(sql, (task_id,))  # –ü–µ—Ä–µ–¥–∞–µ–º task_id –∫–∞–∫ –∫–æ—Ä—Ç–µ–∂ —Å –æ–¥–Ω–∏–º —ç–ª–µ–º–µ–Ω—Ç–æ–º
    task_name, description, reward = mycursor.fetchone()  # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback_query.message.answer(
        f'–ó–∞–¥–∞—á–∞ –Ω–æ–º–µ—Ä: {task_id}\nüìú<b>{task_name}</b>\n\nüìã<i>{description}</i>\n\n{reward}üí≤', parse_mode='HTML'
    )

    # –ü–æ–¥—Ç–≤–µ—Ä–∂–¥–∞–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É callback –∑–∞–ø—Ä–æ—Å–∞
    await callback_query.answer()


class MakeTask():

    @router.message(F.text == '–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µüìá') 
    async def makeTask(message: Message, state: FSMContext):
        await state.set_state(TaskStatus.name)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –∑–∞–¥–∞—á–∏ –∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ')

    @router.message(TaskStatus.name)
    async def nameTask(message: Message, state: FSMContext):
        await state.update_data(name=message.text)
        await state.set_state(TaskStatus.desc)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –æ–ø–∏—Å–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è')

    @router.message(TaskStatus.desc)
    async def descTask(message: Message, state: FSMContext):
        await state.update_data(desc=message.text)
        await state.set_state(TaskStatus.price)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –∑–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ')
        await state.update_data(usr_id=message.from_user.id)

    @router.message(TaskStatus.price)
    async def priceTask(message: Message, state: FSMContext):
        await state.update_data(price=message.text)
        data = await state.get_data()
        x = data.get('name')
        y = data.get('desc')
        z = data.get('price')
        task_usr = data.get('usr_id')

        sql_get_balance = 'SELECT balance FROM users WHERE telegram_id = %s'
        mycursor.execute(sql_get_balance, (task_usr,))
        balance_result = mycursor.fetchone()

        if balance_result is not None:
            balance = balance_result[0]
            if balance < int(z) or int(z) < 0:
                await message.answer(f'–£ –≤–∞—Å –Ω–µ—Ç –¥–µ–Ω–µ–≥ –Ω–∞ –æ–ø–ª–∞—Ç—É –∑–∞–¥–∞–Ω–∏—è, –≤–∞—à –±–∞–ª–∞–Ω—Å {balance}', reply_markup=kb.main)
            else:
                await message.answer(f'üìú<b>{x}</b>\n\nüìã<i>{y}</i>\n\nüí≤{z}\n\n–ü—É–±–ª–∏–∫—É–µ–º?', parse_mode='HTML', reply_markup=kb.publicu)
        else:
            await message.answer("–û—à–∏–±–∫–∞: –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –±–∞–ª–∞–Ω—Å. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")

    @router.callback_query(F.data == 'yes')
    async def publicationTask(callback: CallbackQuery, state: FSMContext):
        create_time = dt.datetime.now()
        data = await state.get_data()
        task_name = data.get('name')
        task_desc = data.get('desc')
        task_price = data.get('price')
        task_usr = data.get('usr_id')

        try:
            sql_update_balance = 'UPDATE users SET balance = balance - %s WHERE telegram_id = %s'
            sql_insert_task = '''
            INSERT INTO tasks (creator_id, task_name, description, reward, status, created_at)
            VALUES (%s, %s, %s, %s, %s, %s)
            '''
            sql_data = (task_usr, task_name, task_desc, task_price, 'open', create_time)
            sql_data_update = (task_price, task_usr)

            mycursor.execute(sql_update_balance, sql_data_update)
            mycursor.execute(sql_insert_task, sql_data)
            mydb.commit()

            await callback.message.answer('–ó–∞–¥–∞–Ω–∏–µ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ!')
        except Exception as e:
            await callback.message.answer(f'–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –∑–∞–¥–∞–Ω–∏—è: {e}')
        finally:
            await callback.message.edit_reply_markup(reply_markup=None)
            await callback.message.answer('', reply_markup=kb.main)
            await state.clear()

    @router.callback_query(F.data == 'no')
    async def dontPublicationTask(callback: CallbackQuery):
        await callback.message.edit_reply_markup(reply_markup=None)
        await callback.message.answer('–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞, –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –≤–∞—Å –≤ –º–µ–Ω—é', reply_markup=kb.main)

@router.message(F.text == '–ü—Ä–æ—Ñ–∏–ª—åü§ñ')
async def profile(message: Message):
    user_id = message.from_user.id
    first_name = message.from_user.first_name
    balance_query = 'SELECT balance FROM users WHERE user_id = %s'
    mycursor.execute(balance_query, (user_id,))
    balance_result = mycursor.fetchone()

    if balance_result is None:
        balance_clear = 0.0
    else:
        balance_clear = float(balance_result[0])

    await message.answer(f'–ò–º—è: {first_name}\n–ù–æ–º–µ—Ä —Å—á—ë—Ç–∞: {user_id}\n–ë–∞–ª–∞–Ω—Å: {balance_clear} BKS')
