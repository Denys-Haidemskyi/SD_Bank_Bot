from aiogram.types import ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from bas.base import mycursor, mydb
from aiogram.filters import CommandStart, Command
from aiogram import Router, types, Dispatcher
from bas.base import mycursor, mydb


main = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–ü—Ä–æ—Ñ–∏–ª—åü§ñ')],
        [KeyboardButton(text='–ó–∞–¥–∞–Ω–∏—èüìã'), KeyboardButton(text='–°–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µüìá')],
        [KeyboardButton(text='–ë–∞–Ω–∫üèõÔ∏è')]
    ],
    resize_keyboard=True,
    input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...'
)

publicu = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–î–∞‚úÖ', callback_data='yes')],
        [InlineKeyboardButton(text='–ù–µ—Ç‚ùå', callback_data='no')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'back_')]        
    ]
)

profile = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton(text='–í —Ä–∞–±–æ—Ç–µüìã'), KeyboardButton(text='–ú–æ–∏ –∑–∞–¥–∞–Ω–∏—èüìá')],
        [KeyboardButton(text='–û–∂–∏–¥–∞—é—Ç –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è')],
        [KeyboardButton(text='–ù–∞–∑–∞–¥')]
    ],
    resize_keyboard=True,
    input_field_placeholder='–í—ã–±–µ—Ä–∏—Ç–µ –ø—É–Ω–∫—Ç –º–µ–Ω—é...'
)

def how(task_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–ò–∑–º–µ–Ω–∏—Ç—åüîß', callback_data=f'change_{task_id}')],
            [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—åüóëÔ∏è', callback_data=f'delete_{task_id}')],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'back_')]
        ]
    )
async def in_progress(usr):
    sql_get_task = 'SELECT task_id, task_name FROM tasks WHERE creator_id = %s AND status = "open"'

    mycursor.execute(sql_get_task, (usr,))
    tasks_data = mycursor.fetchall()

    tasks_keyboard = InlineKeyboardMarkup(inline_keyboard=[])

    buttons = []
    for task_id, task_name in tasks_data:
        button = InlineKeyboardButton(text=f'{task_name}', callback_data=f'tasks_{task_id}')
        buttons.append(button)
    
    row_size = 2
    rows = [buttons[i:i + row_size] for i in range(0, len(buttons), row_size)]

    tasks_keyboard.inline_keyboard = rows

    return tasks_keyboard

def create_accept_task_keyboard(task_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–ü—Ä–∏–Ω—è—Ç—å‚úÖ', callback_data=f'accept_{task_id}')],
            [InlineKeyboardButton(text='–û—Ç–∫–ª–æ–Ω–∏—Ç—å‚ùå', callback_data=f'decline_{task_id}')],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'back_')]
        ]
    
)

async def handle_button(callback_query: types.CallbackQuery):
    # –°–∫—Ä—ã—Ç–∏–µ –∏–Ω–ª–∞–π–Ω-–∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã
    await callback_query.message.edit_reply_markup(reply_markup=None)

async def create_tasks_keyboard(id):
    # –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞
    sql_get_task = 'SELECT task_id, task_name FROM tasks WHERE status = "open" AND creator_id != %s'

    mycursor.execute(sql_get_task, (id,))
    tasks_data = mycursor.fetchall()  # –í—ã–∑–æ–≤ –º–µ—Ç–æ–¥–∞ fetchall()

    # –°–æ–∑–¥–∞–Ω–∏–µ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –∑–∞–¥–∞—á
    tasks_keyboard = InlineKeyboardMarkup(inline_keyboard=[])  # –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –ø–µ—Ä–µ–¥–∞–µ—Ç–µ –ø—É—Å—Ç–æ–π —Å–ø–∏—Å–æ–∫

    # –°–æ–∑–¥–∞–Ω–∏–µ —Å—Ç—Ä–æ–∫ –∫–Ω–æ–ø–æ–∫
    buttons = []
    for task_id, task_name in tasks_data:
        button = InlineKeyboardButton(text=f'{task_name}', callback_data=f'task_{task_id}')
        buttons.append(button)
    
    # –†–∞–∑–¥–µ–ª–µ–Ω–∏–µ –∫–Ω–æ–ø–æ–∫ –Ω–∞ —Å—Ç—Ä–æ–∫–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ 2 –∫–Ω–æ–ø–∫–∏ –≤ —Å—Ç—Ä–æ–∫–µ)
    row_size = 2
    rows = [buttons[i:i + row_size] for i in range(0, len(buttons), row_size)]

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä–æ–∫ –≤ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    tasks_keyboard.inline_keyboard = rows

    return tasks_keyboard

async def WorkTasks(usr):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    sql_get = 'SELECT task_id FROM taskassignments WHERE executor_id = %s AND status = "in_progress" OR status = "rejected"'
    mycursor.execute(sql_get, (usr,))
    task_ids = mycursor.fetchall()  # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ task_id –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è

    if task_ids:
        # task_ids - —ç—Ç–æ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π, –ø–æ—ç—Ç–æ–º—É –Ω—É–∂–Ω–æ —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –µ–≥–æ
        task_names = []
        tasks_data = []  # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä (task_id, task_name)
        sql_get_task = 'SELECT task_name FROM tasks WHERE task_id = %s'
        
        for task_id_tuple in task_ids:
            task_id = task_id_tuple[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º task_id –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
            mycursor.execute(sql_get_task, (task_id,))
            task_name = mycursor.fetchone()  # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–∞–¥–∞–Ω–∏—è
            if task_name:  # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –∑–∞–¥–∞–Ω–∏–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
                task_name = task_name[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
                task_names.append(task_name)  # –î–æ–±–∞–≤–ª—è–µ–º –∏–º—è –∑–∞–¥–∞–Ω–∏—è –≤ —Å–ø–∏—Å–æ–∫
                tasks_data.append((task_id, task_name))  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É (task_id, task_name) –≤ tasks_data

        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞—á
        tasks_keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        buttons = []
        for task_id, task_name in tasks_data:
            button = InlineKeyboardButton(text=f'{task_name}', callback_data=f'WorkTaskId_{task_id}')
            buttons.append(button)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
        row_size = 2
        rows = [buttons[i:i + row_size] for i in range(0, len(buttons), row_size)]

        tasks_keyboard.inline_keyboard = rows

        return tasks_keyboard
    else:
        print('–û—à–∏–±–∫–∞, –∑–∞–¥–∞–Ω–∏–π –Ω–µ—Ç—É!',)

def what_change(change_id):
    return InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text='–ù–∞–∑–≤–∞–Ω–∏–µ', callback_data=f'taskName_{change_id}')],
            [InlineKeyboardButton(text='–û–ø–∏—Å–∞–Ω–∏–µ', callback_data=f'taskDescription_{change_id}')],
            [InlineKeyboardButton(text='–¶–µ–Ω–∞', callback_data=f'taskPrice_{change_id}')],
            [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'back_')]
        ]
    )

def WhatAreDoing(task_id):
    whatkeyboard = InlineKeyboardMarkup(inline_keyboard=[
        [InlineKeyboardButton(text='–í—ã–ø–æ–ª–Ω–µ–Ω–æ‚úÖ', callback_data=f'Done_{task_id}')],
        [InlineKeyboardButton(text='–£–¥–∞–ª–∏—Ç—åüóëÔ∏è', callback_data=f'Delete_{task_id}')],
        [InlineKeyboardButton(text='–Ω–∞–∑–∞–¥', callback_data=f'back_')],
    ])
    return whatkeyboard

async def Approve(user):
    # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è —Å "in_progress" —Å—Ç–∞—Ç—É—Å–æ–º
    sql_get = 'SELECT task_id FROM tasks WHERE creator_id = %s AND status = "in_progress"'
    mycursor.execute(sql_get, (user,))
    getted = mycursor.fetchall()
    
    # –°–ø–∏—Å–æ–∫ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–∞—Ä (task_id, task_name)
    tasks_data = []

    for task in getted:
        task_id = task[0]  # –ü–æ–ª—É—á–∞–µ–º task_id –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∑–∞–≤–µ—Ä—à–µ–Ω–æ –ª–∏ –∑–∞–¥–∞–Ω–∏–µ
        sql_get_new = 'SELECT task_id FROM taskassignments WHERE task_id = %s AND status = "completed"'
        mycursor.execute(sql_get_new, (task_id,))
        get_new = mycursor.fetchone()
        
        if get_new:  # –ï—Å–ª–∏ –∑–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ
            # –ü–æ–ª—É—á–∞–µ–º –∏–º—è –∑–∞–¥–∞–Ω–∏—è
            sql_get_task_name = 'SELECT task_name FROM tasks WHERE task_id = %s'
            mycursor.execute(sql_get_task_name, (task_id,))
            task_name = mycursor.fetchone()
            
            if task_name:
                task_name = task_name[0]  # –ò–∑–≤–ª–µ–∫–∞–µ–º –∏–º—è –∑–∞–¥–∞–Ω–∏—è –∏–∑ –∫–æ—Ä—Ç–µ–∂–∞
                tasks_data.append((task_id, task_name))  # –î–æ–±–∞–≤–ª—è–µ–º –ø–∞—Ä—É (task_id, task_name) –≤ —Å–ø–∏—Å–æ–∫

    if tasks_data:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –∑–∞–¥–∞—á
        tasks_keyboard = InlineKeyboardMarkup(inline_keyboard=[])

        buttons = []
        for task_id, task_name in tasks_data:
            button = InlineKeyboardButton(text=f'{task_name}', callback_data=f'taskap_{task_id}')
            buttons.append(button)
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–∞–∑–º–µ—Ä —Å—Ç—Ä–æ–∫–∏
        row_size = 2
        rows = [buttons[i:i + row_size] for i in range(0, len(buttons), row_size)]

        tasks_keyboard.inline_keyboard = rows

        return tasks_keyboard
    else:
        print('–ù–µ—Ç –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π')
        return None

async def howwedoit(id):
    kbdo = InlineKeyboardMarkup(
    inline_keyboard=[
        [InlineKeyboardButton(text='–ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å‚úÖ', callback_data=f'approve_{id}')],
        [InlineKeyboardButton(text='–û—Ç–∫–∞–∑–∞—Ç—å‚ùå', callback_data=f'reject_{id}')],
        [InlineKeyboardButton(text='–ù–∞–∑–∞–¥', callback_data=f'back_')]        
    ]
)
    return kbdo